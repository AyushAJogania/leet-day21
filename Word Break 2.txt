#include <iostream>
#include <vector>
#include <unordered_set>

class Solution {
public:
    std::vector<std::string> wordBreak(std::string s, std::vector<std::string>& wordDict) {
        std::unordered_set<std::string> dict(wordDict.begin(), wordDict.end());
        std::vector<std::string> result;
        std::vector<std::string> sentence;
        backtrack(s, 0, dict, sentence, result);
        return result;
    }

private:
    void backtrack(std::string& s, int start, std::unordered_set<std::string>& dict, std::vector<std::string>& sentence, std::vector<std::string>& result) {
        if (start == s.length()) {
            result.push_back(buildSentence(sentence));
            return;
        }

        for (int end = start + 1; end <= s.length(); end++) {
            std::string word = s.substr(start, end - start);
            if (dict.count(word)) {
                sentence.push_back(word);
                backtrack(s, end, dict, sentence, result);
                sentence.pop_back();
            }
        }
    }

    std::string buildSentence(std::vector<std::string>& sentence) {
        std::string result;
        for (int i = 0; i < sentence.size(); i++) {
            result += sentence[i];
            if (i < sentence.size() - 1) {
                result += " ";
            }
        }
        return result;
    }
};

